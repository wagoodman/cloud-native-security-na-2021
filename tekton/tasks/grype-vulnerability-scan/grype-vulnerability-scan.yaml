
kind: Task
apiVersion: tekton.dev/v1beta1
metadata:
  name: grype-vulnerability-scan

spec:
  description: >-
    Scan an SBOM or container image for known vulnerabilities
  params:
  - name: input
    description: The image reference or SBOM file to scan
  - name: grype-image
    description: The grype image to use to perform the vulnerability scan
    # default: 'docker.io/anchore/grype:v0.21'
    default: 'ghcr.io/wagoodman/grype:dev'
  - name: extra-args
    type: array
    default: []

  workspaces:
  - name: scan-target
    optional: true
  - name: output

  results:
    - name: report-filename
      description: The name of the vulnerability scan report file generated in the output workspace

  steps:
  - name: vulnerability-scan
    image: $(params.grype-image)
    env:
    - name: REPORT_PATH
      value: $(workspaces.output.path)/vulnerability-scan.json
    # we must combine our scan and quality gates into a single step since we are using a workspace due to a bug in onError https://github.com/tektoncd/pipeline/issues/4253
    # onError: continue
    script: |
      #!/usr/bin/env sh
      /grype -vv -o json --fail-on low -f ${REPORT_PATH} $(params.input)
      rc=$?

      python - <<'___EOF___'
      import json
      import os
      import sys

      with open(os.environ["REPORT_PATH"]) as f:
          contents = json.load(f)

      if len(contents["matches"]) == 0:
        print("No vulnerabilities found")
        sys.exit(0)

      print(f"{'ID':18s} {'SEVERITY':12s} {'PACKAGE':30s} {'TYPE':7s} {'URL':10s}")
      for match in contents["matches"]:
          print(f"{match['vulnerability']['id']:18s} {match['vulnerability']['severity']:12s} {match['artifact']['name'] + ' @ ' + match['artifact']['version']:30s} {match['artifact']['type']:7s} {match['vulnerability']['dataSource']:10s}")
      ___EOF___

      echo vulnerability-scan.json | tee $(results.report-filename.path)

      if [ $rc -ne 0 ]; then
          echo "one or more vulnerabilities are at or above the allowable threshold"
      fi
      exit $rc
