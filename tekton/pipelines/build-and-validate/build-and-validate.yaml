apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-and-validate
spec:

  workspaces:
    - name: share

  params:
    - name: git-repo-url
      type: string
      default: https://github.com/wagoodman/dummy-project
    - name: image-name
      type: string
      default: ghcr.io/wagoodman/dummy-project
    - name: git-repo-ref
      type: string
      # default: e68a80446ec8c3b220a39efeafc72e73c39177e2
      default: small-build
    - name: dockerfile-path
      type: string
      default: 'Dockerfile'

  tasks:
    - name: generate-build-id
      taskRef:
        name: generate-build-id
      params:
        - name: base-version
          value: $(params.git-repo-ref)

    - name: fetch-repository
      taskRef:
        name: git-clone
      runAfter:
        - generate-build-id
      workspaces:
        - name: output
          workspace: share
      params:
        - name: url
          value: $(params.git-repo-url)
        - name: revision
          value: $(params.git-repo-ref)
        - name: sslVerify
          value: 'false'
        - name: deleteExisting
          value: 'true'
        - name: subdirectory
          value: build-$(tasks.generate-build-id.results.build-id)

    # TODO: remove note..... this is for the fake secret exposure
    - name: fetch-and-prep-assets
      taskRef:
        name: prep-assets
      runAfter:
        - fetch-repository
      workspaces:
        - name: source
          workspace: share
      params:
      - name: subdirectory
        value: build-$(tasks.generate-build-id.results.build-id)


    # TODO: hadolint dockerfile

    - name: build
      taskRef:
        name: kaniko
        kind: Task
      runAfter:
        - fetch-repository
        - fetch-and-prep-assets
      workspaces:
        - name: source
          workspace: share
      params:
      - name: IMAGE
        value: $(params.image-name):git-$(params.git-repo-ref)
      - name: CONTEXT
        value: build-$(tasks.generate-build-id.results.build-id)
      - name: DOCKERFILE
        value: $(params.dockerfile-path)
      - name: EXTRA_ARGS
        value:
          - '--reproducible'
          - '--label'
          - 'build=$(tasks.generate-build-id.results.build-id)'
          # - '--verbosity=debug'
          - '--no-push'
          - '--oci-layout-path=$(workspaces.source.path)/oci-$(tasks.generate-build-id.results.build-id)'

    - name: create-sbom
      taskRef:
        name: syft-generate-sbom
        kind: Task
      runAfter:
        - build
      workspaces:
        - name: image-content
          workspace: share
        - name: output
          workspace: share
      params:
      - name: image
        value: 'oci-dir:$(workspaces.image-content.path)/oci-$(tasks.generate-build-id.results.build-id)'
      - name: extra-args
        value:
          - "power-user"

    # TODO: extra quality gating (jq sbom.json to check for secrets)

    # check for vulnerabilities

    - name: vulnerability-scan
      taskRef:
        name: grype-vulnerability-scan
        kind: Task
      runAfter:
        - create-sbom
      workspaces:
        - name: scan-target
          workspace: share
        - name: output
          workspace: share
      params:
      - name: input
        value: 'sbom:$(workspaces.scan-target.path)/$(tasks.create-sbom.results.sbom-filename)'
      # TODO: add threshold for later
      # - name: extra-args
      #   value:
      #     - "--fail-on"
      #     - critical

    # TODO: dive quality gate?

    # TODO: extra quality gating (jq vulnerability-scan.json)

    - name: push-to-registry
      taskRef:
        name: skopeo-copy
        kind: Task
      runAfter:
        - create-sbom
        - vulnerability-scan
      workspaces:
        - name: images-url
          workspace: share
      params:
      - name: srcImageURL
        value: 'oci:$(workspaces.images-url.path)/oci-$(tasks.generate-build-id.results.build-id)'
      - name: destImageURL
        value: 'docker://$(params.image-name):git-$(params.git-repo-ref)'
